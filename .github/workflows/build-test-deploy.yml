name: Pipeline

on:
  pull_request:
    branches:
      - '*'

env:
  AWS_REGION: 'eu-west-2'
  CYPRESS_CACHE_FOLDER: cypress/cache

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for the actions/checkout

jobs:
  ###############################################################################
  # Install dependencies & build packages
  ###############################################################################

  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - name: Install
        run: npm ci --no-audit --no-fund

  build:
    name: Build
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - uses: ./.github/actions/build-cache
      - name: Build
        run: npm run build

  ###############################################################################
  # Code quality checks
  ###############################################################################

  quality-checks:
    name: Lint
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - uses: ./.github/actions/build-cache
      - name: Quality check
        run: npm run lint

  ##############################################################################
  # Unit tests
  ##############################################################################

  unit-tests:
    name: Unit tests
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - uses: ./.github/actions/build-cache
      - name: Unit tests
        run: npm run test:ci

  ##############################################################################
  # Cypress tests
  ##############################################################################

  cypress-tests:
    name: Cypress tests
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # https://github.com/cypress-io/github-action/issues/48
      matrix:
        containers: [1, 2] # Uses 2 parallel instances
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-node
      - uses: ./.github/actions/install-cache
      - uses: ./.github/actions/build-cache
      - name: Start app
        run: npm run start &
      - uses: ./.github/actions/run-cypress-tests
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          record-key: ${{ secrets.CYPRESS_RECORD_KEY }}
          cache-folder: cypress/cache

  ###############################################################################
  # Deploy
  ###############################################################################

  deploy:
    name: ECR Image Push
    needs: [quality-checks, unit-tests, cypress-tests]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::518944279943:role/devops_github_actions_wp_frontend
          role-session-name: testsession
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: wp-frontend
          IMAGE_TAG: latest
        run: |
          #docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          #docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker-compose build -d $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker-compose push -d $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          aws ecs update-service --cluster wp-frontend-cluster --service wp-frontend-service --force-new-deployment --region eu-west-2
